---
- debug: var=cert_dir
- debug: var=cert_type
- debug: var=common_name

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  become: yes
  with_items:
    - build-essential
    - libssl-dev
    - libffi-dev
    - python-dev
  when: FRESH is defined

- name: Install pip packages
  pip: name={{ item }}
  become: yes
  with_items:
    - enum34
    - cffi
    - pyopenssl
  when: FRESH is defined

- name: Make sure ssl directories exist
  file:
    path: "{{ cert_dir }}/{{ item }}"
    state: directory
  become: yes
  with_items:
    - crt         # cerficates
    - private     # keys
    - csr         # cert requests
    - well-known  # for letsencrypt challenges

- openssl_privatekey:
    path: "{{cert_dir}}/private/{{common_name}}.pem"
  become: yes

- openssl_csr:
    path:            "{{cert_dir}}/csr/{{common_name}}.csr"
    privatekey_path: "{{cert_dir}}/private/{{common_name}}.pem"
    emailAddress:    "{{ operator_email | default('') }} "
    organizationName: "{{ operator_org | default('') }} "
    common_name:     "{{ common_name }}"
  become: yes

# SELF SIGNED CERT
- openssl_certificate:
    path:            "{{cert_dir}}/crt/{{common_name}}.crt"
    privatekey_path: "{{cert_dir}}/private/{{common_name}}.pem"
    csr_path:        "{{cert_dir}}/csr/{{common_name}}.csr"
    provider:        selfsigned
  when:              cert_type=="selfsigned"
  become:            yes

# CERTBOT
# Have to get the nginx server up without a cert, or with a self-signed cert
# to setup the infrastructure first.

- command:  certbot certificates
  register: result
  when: cert_type=="certbot"

- set_fact:
    days_valid: "{{ result.stdout | regex_findall( regexp ) | first | default(-1) | int }}"
  vars:
    regexp: 'Domains: {{common_name}}.*VALID: (?P<days>\d+) days\)'
  when: cert_type=="certbot"

- debug:
    var: days_valid
  when: cert_type=="certbot"

- debug:
    msg="Ready to renew"
  when: cert_type=="certbot" and days_valid | int > 0 and days_valid | int < 30

#- command: "certbot renew"
#  become:  yes
#  when:    cert_type=="certbot" and days_valid | int < 30

- debug:
    msg="Needs new cert"
  when: cert_type=="certbot" and days_valid | int < 0

## Append --dry-run to confirm that it works
#- command: "certbot certonly --webroot -w {{cert_dir}}/well-known -d {{common_name}}"
#  become:  yes
#  when:    cert_type=="certbot" and days_valid | int < 0

- debug:
    msg="No action needed"
  when: cert_type=="certbot" and days_valid | int >= 30

# Make sure the files exist, if FRESH
#- stat: path="/etc/letsencrypt/live/{{common_name}}/fullchain.pem"
#  when: FRESH is defined and cert_type=="certbot"
#
#- stat: path="/etc/letsencrypt/live/{{common_name}}/privkey.pem"
#  when: FRESH is defined and cert_type=="certbot"

#- command: "cp /etc/letsencrypt/live/{{common_name}}/fullchain.pem {{cert_dir}}/crt/{{common_name}}.crt"
#  when: cert_type=="certbot"
#
#- command: "cp /etc/letsencrypt/live/{{common_name}}/privkey.pem {{cert_dir}}/private/{{common_name}}.pem"
#  when: cert_type=="certbot"
